package com.fh.shop.api.util;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class HttpClientUtil {

    public static String httpClientUtil(String url){
        CloseableHttpClient client = null;
        HttpGet httpGet = null;
        CloseableHttpResponse response = null;
        String str = "";
        try {
            //打开预览器
            client = HttpClientBuilder.create().build();
            //输入url
            httpGet = new HttpGet(url);
            //敲回车
            response = client.execute(httpGet);
            //获取数据
            HttpEntity entity = response.getEntity();
            str = EntityUtils.toString(entity, "utf-8");
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            if (response != null){
                try {
                    response.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (httpGet != null){
                httpGet.releaseConnection();
            }
            if (client != null){
                try {
                    client.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return str;
    }

    public static String HttpClientUtil(String url, Map<String,String> parameter ,Map<String,String> head){
        CloseableHttpClient client = null;
        HttpPost httpPost = null;
        CloseableHttpResponse response = null;
        String string = "";
        try {
            //打开预览器
            client = HttpClientBuilder.create().build();
            //输入url
            httpPost = new HttpPost(url);
            //传递的参数
            List<NameValuePair> nvpList = new ArrayList();
            if (parameter != null && parameter.size() > 0){
                Iterator<Map.Entry<String, String>> iterator = parameter.entrySet().iterator();
                while (iterator.hasNext()){
                    Map.Entry<String, String> next = iterator.next();
                    String key = next.getKey();
                    String value = next.getValue();
                    nvpList.add(new BasicNameValuePair(key , value));
                }
                UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nvpList);
                httpPost.setEntity(urlEncodedFormEntity);
            }
            if (head != null && head.size() > 0){
                Iterator<Map.Entry<String, String>> headMap = head.entrySet().iterator();
                while (headMap.hasNext()){
                    Map.Entry<String, String> next = headMap.next();
                    String key = next.getKey();
                    String value = next.getValue();
                    httpPost.addHeader(key , value);
                }
            }
            //点击回车
            response = client.execute(httpPost);
            HttpEntity entity1 = response.getEntity();
            string = EntityUtils.toString(entity1, "utf-8");
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            if (response != null){
                try {
                    response.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (httpPost != null){
                httpPost.releaseConnection();
            }
            if (client != null){
                try {
                    client.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return string;
    }
}
